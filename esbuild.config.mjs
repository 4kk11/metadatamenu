import esbuild from "esbuild";
import process, { env } from "process";
import builtins from "builtin-modules";
import fs from 'node:fs'

let envPlugin = {
	name: 'env',
	setup(build) {
		// Load paths tagged with the "env-ns" namespace and behave as if
		// they point to a JSON file containing the environment variables.
		build.onLoad({ filter: /env.js/ }, async (args) => {

			let DEBUG = false
			process.argv.forEach((val, index) => {
				const match = val.match(/--define:DEBUG=(?<debug>false|true)/)
				if (match) DEBUG = match.groups.debug
			})
			await fs.promises.writeFile("./env.js", `window.DEBUG=${DEBUG}`)
			return {}
		})
	},
}

const banner =
	`/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/
`;
const prod = (process.argv[2] === "production");

const context = await esbuild.context({
	banner: {
		js: banner,
	},
	entryPoints: ["main.ts"],
	bundle: true,
	external: [
		"obsidian",
		"electron",
		"@codemirror/autocomplete",
		"@codemirror/collab",
		"@codemirror/commands",
		"@codemirror/language",
		"@codemirror/lint",
		"@codemirror/search",
		"@codemirror/state",
		"@codemirror/view",
		"@lezer/common",
		"@lezer/highlight",
		"@lezer/lr",
		...builtins],
	format: "cjs",
	target: "es2018",
	logLevel: "info",
	sourcemap: prod ? false : "inline",
	treeShaking: true,
	outfile: "main.js",
	plugins: [envPlugin]
});

if (prod) {
	await context.rebuild();
	process.exit(0);
} else {
	await context.watch();
}